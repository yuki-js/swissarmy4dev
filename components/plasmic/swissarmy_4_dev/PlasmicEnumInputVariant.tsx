// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3sWsabkqMN5rF9tgqCnVDh
// Component: wacjR-sYjk
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_swissarmy_4_dev.module.css"; // plasmic-import: 3sWsabkqMN5rF9tgqCnVDh/projectcss
import sty from "./PlasmicEnumInputVariant.module.css"; // plasmic-import: wacjR-sYjk/css

import DoneBlack24DpsvgIcon from "./icons/PlasmicIcon__DoneBlack24Dpsvg"; // plasmic-import: REfP86HN8M/icon

export type PlasmicEnumInputVariant__VariantMembers = {
  checked: "checked";
};

export type PlasmicEnumInputVariant__VariantsArgs = {
  checked?: SingleBooleanChoiceArg<"checked">;
};

type VariantPropType = keyof PlasmicEnumInputVariant__VariantsArgs;
export const PlasmicEnumInputVariant__VariantProps = new Array<VariantPropType>(
  "checked"
);

export type PlasmicEnumInputVariant__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicEnumInputVariant__ArgsType;
export const PlasmicEnumInputVariant__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicEnumInputVariant__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultEnumInputVariantProps {
  children?: React.ReactNode;
  checked?: SingleBooleanChoiceArg<"checked">;
  className?: string;
}

function PlasmicEnumInputVariant__RenderFunc(props: {
  variants: PlasmicEnumInputVariant__VariantsArgs;
  args: PlasmicEnumInputVariant__ArgsType;
  overrides: PlasmicEnumInputVariant__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootchecked]: hasVariant(variants, "checked", "checked") }
      )}
    >
      {true ? (
        <DoneBlack24DpsvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgchecked]: hasVariant(variants, "checked", "checked")
          })}
          role={"img"}
        />
      ) : null}

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxchecked]: hasVariant(variants, "checked", "checked")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Enter some text",
          value: args.children
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "freeBox"],
  svg: ["svg"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEnumInputVariant__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEnumInputVariant__VariantsArgs;
    args?: PlasmicEnumInputVariant__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEnumInputVariant__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEnumInputVariant__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEnumInputVariant__ArgProps,
      internalVariantPropNames: PlasmicEnumInputVariant__VariantProps
    });

    return PlasmicEnumInputVariant__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEnumInputVariant";
  } else {
    func.displayName = `PlasmicEnumInputVariant.${nodeName}`;
  }
  return func;
}

export const PlasmicEnumInputVariant = Object.assign(
  // Top-level PlasmicEnumInputVariant renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicEnumInputVariant
    internalVariantProps: PlasmicEnumInputVariant__VariantProps,
    internalArgProps: PlasmicEnumInputVariant__ArgProps
  }
);

export default PlasmicEnumInputVariant;
/* prettier-ignore-end */
