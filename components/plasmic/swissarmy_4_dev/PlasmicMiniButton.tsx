// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3sWsabkqMN5rF9tgqCnVDh
// Component: 6HqZwsKMES
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_swissarmy_4_dev.module.css"; // plasmic-import: 3sWsabkqMN5rF9tgqCnVDh/projectcss
import sty from "./PlasmicMiniButton.module.css"; // plasmic-import: 6HqZwsKMES/css

import ContentCopyBlack24DpsvgIcon from "./icons/PlasmicIcon__ContentCopyBlack24Dpsvg"; // plasmic-import: WguJg4FH-q/icon

export type PlasmicMiniButton__VariantMembers = {};

export type PlasmicMiniButton__VariantsArgs = {};
type VariantPropType = keyof PlasmicMiniButton__VariantsArgs;
export const PlasmicMiniButton__VariantProps = new Array<VariantPropType>();

export type PlasmicMiniButton__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicMiniButton__ArgsType;
export const PlasmicMiniButton__ArgProps = new Array<ArgPropType>("children");

export type PlasmicMiniButton__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultMiniButtonProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicMiniButton__RenderFunc(props: {
  variants: PlasmicMiniButton__VariantsArgs;
  args: PlasmicMiniButton__ArgsType;
  overrides: PlasmicMiniButton__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <ContentCopyBlack24DpsvgIcon
              className={classNames(projectcss.all, sty.svg__wmTxq)}
              role={"img"}
            />
          ),

          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMiniButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMiniButton__VariantsArgs;
    args?: PlasmicMiniButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMiniButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMiniButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMiniButton__ArgProps,
      internalVariantPropNames: PlasmicMiniButton__VariantProps
    });

    return PlasmicMiniButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMiniButton";
  } else {
    func.displayName = `PlasmicMiniButton.${nodeName}`;
  }
  return func;
}

export const PlasmicMiniButton = Object.assign(
  // Top-level PlasmicMiniButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicMiniButton
    internalVariantProps: PlasmicMiniButton__VariantProps,
    internalArgProps: PlasmicMiniButton__ArgProps
  }
);

export default PlasmicMiniButton;
/* prettier-ignore-end */
