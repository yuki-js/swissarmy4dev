// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3sWsabkqMN5rF9tgqCnVDh
// Component: WReG0kfettn73
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MiniButton from "../../MiniButton"; // plasmic-import: 6HqZwsKMES/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_swissarmy_4_dev.module.css"; // plasmic-import: 3sWsabkqMN5rF9tgqCnVDh/projectcss
import sty from "./PlasmicStringInput.module.css"; // plasmic-import: WReG0kfettn73/css

import ContentCopyBlack24DpsvgIcon from "./icons/PlasmicIcon__ContentCopyBlack24Dpsvg"; // plasmic-import: WguJg4FH-q/icon
import ContentPasteBlack24DpsvgIcon from "./icons/PlasmicIcon__ContentPasteBlack24Dpsvg"; // plasmic-import: Z8nqdyP-Qq/icon

export type PlasmicStringInput__VariantMembers = {
  disabled: "disabled";
};

export type PlasmicStringInput__VariantsArgs = {
  disabled?: SingleBooleanChoiceArg<"disabled">;
};

type VariantPropType = keyof PlasmicStringInput__VariantsArgs;
export const PlasmicStringInput__VariantProps = new Array<VariantPropType>(
  "disabled"
);

export type PlasmicStringInput__ArgsType = {
  title?: React.ReactNode;
  placeholder?: string;
};

type ArgPropType = keyof PlasmicStringInput__ArgsType;
export const PlasmicStringInput__ArgProps = new Array<ArgPropType>(
  "title",
  "placeholder"
);

export type PlasmicStringInput__OverridesType = {
  root?: p.Flex<"div">;
  copy?: p.Flex<typeof MiniButton>;
  paste?: p.Flex<typeof MiniButton>;
  text?: p.Flex<"textarea">;
};

export interface DefaultStringInputProps {
  title?: React.ReactNode;
  placeholder?: string;
  disabled?: SingleBooleanChoiceArg<"disabled">;
  className?: string;
}

function PlasmicStringInput__RenderFunc(props: {
  variants: PlasmicStringInput__VariantsArgs;
  args: PlasmicStringInput__ArgsType;
  overrides: PlasmicStringInput__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___6Lh4)}>
        <div
          className={classNames(projectcss.all, sty.freeBox__n4Et, {
            [sty.freeBoxdisabled__n4Eto996O]: hasVariant(
              variants,
              "disabled",
              "disabled"
            )
          })}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__aUjAf)}>
              {p.renderPlasmicSlot({
                defaultContents: "Enter some text",
                value: args.title
              })}
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox___8NsV4)}>
            {true ? (
              <MiniButton
                data-plasmic-name={"copy"}
                data-plasmic-override={overrides.copy}
                className={classNames("__wab_instance", sty.copy, {
                  [sty.copydisabled]: hasVariant(
                    variants,
                    "disabled",
                    "disabled"
                  )
                })}
              >
                <ContentCopyBlack24DpsvgIcon
                  className={classNames(projectcss.all, sty.svg__vye, {
                    [sty.svgdisabled__vyeO996O]: hasVariant(
                      variants,
                      "disabled",
                      "disabled"
                    )
                  })}
                  role={"img"}
                />
              </MiniButton>
            ) : null}
            {(hasVariant(variants, "disabled", "disabled") ? true : true) ? (
              <MiniButton
                data-plasmic-name={"paste"}
                data-plasmic-override={overrides.paste}
                className={classNames("__wab_instance", sty.paste, {
                  [sty.pastedisabled]: hasVariant(
                    variants,
                    "disabled",
                    "disabled"
                  )
                })}
              >
                <ContentPasteBlack24DpsvgIcon
                  className={classNames(projectcss.all, sty.svg__nIu3T)}
                  role={"img"}
                />
              </MiniButton>
            ) : null}
          </div>
        </div>

        {true ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__b7JZh, {
              [sty.freeBoxdisabled__b7JZhO996O]: hasVariant(
                variants,
                "disabled",
                "disabled"
              )
            })}
          >
            <textarea
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.textarea,
                sty.text,
                "resizeTextarea" as const,
                {
                  [sty.textdisabled]: hasVariant(
                    variants,
                    "disabled",
                    "disabled"
                  )
                }
              )}
              disabled={
                hasVariant(variants, "disabled", "disabled") ? true : undefined
              }
              placeholder={args.placeholder}
            />
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "copy", "paste", "text"],
  copy: ["copy"],
  paste: ["paste"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  copy: typeof MiniButton;
  paste: typeof MiniButton;
  text: "textarea";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStringInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStringInput__VariantsArgs;
    args?: PlasmicStringInput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStringInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStringInput__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStringInput__ArgProps,
      internalVariantPropNames: PlasmicStringInput__VariantProps
    });

    return PlasmicStringInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStringInput";
  } else {
    func.displayName = `PlasmicStringInput.${nodeName}`;
  }
  return func;
}

export const PlasmicStringInput = Object.assign(
  // Top-level PlasmicStringInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    copy: makeNodeComponent("copy"),
    paste: makeNodeComponent("paste"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicStringInput
    internalVariantProps: PlasmicStringInput__VariantProps,
    internalArgProps: PlasmicStringInput__ArgProps
  }
);

export default PlasmicStringInput;
/* prettier-ignore-end */
