// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3sWsabkqMN5rF9tgqCnVDh
// Component: b_S_J7Ei1n
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_swissarmy_4_dev.module.css"; // plasmic-import: 3sWsabkqMN5rF9tgqCnVDh/projectcss
import sty from "./PlasmicRoot.module.css"; // plasmic-import: b_S_J7Ei1n/css

import SentimentSatisfiedAltBlack24DpsvgIcon from "./icons/PlasmicIcon__SentimentSatisfiedAltBlack24Dpsvg"; // plasmic-import: QujGi_DpxH/icon

export type PlasmicRoot__VariantMembers = {};

export type PlasmicRoot__VariantsArgs = {};
type VariantPropType = keyof PlasmicRoot__VariantsArgs;
export const PlasmicRoot__VariantProps = new Array<VariantPropType>();

export type PlasmicRoot__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicRoot__ArgsType;
export const PlasmicRoot__ArgProps = new Array<ArgPropType>("children");

export type PlasmicRoot__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  svg?: p.Flex<"svg">;
  text?: p.Flex<"div">;
};

export interface DefaultRootProps {}

function PlasmicRoot__RenderFunc(props: {
  variants: PlasmicRoot__VariantsArgs;
  args: PlasmicRoot__ArgsType;
  overrides: PlasmicRoot__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__fHwKw)}>
            <div className={classNames(projectcss.all, sty.freeBox__iaNi)}>
              <p.Stack
                as={p.PlasmicLink}
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                hasGap={true}
                className={classNames(projectcss.all, projectcss.a, sty.link)}
                component={Link}
                href={"/" as const}
                platform={"nextjs"}
              >
                <SentimentSatisfiedAltBlack24DpsvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {"Swiss army knife for developer"}
                </div>
              </p.Stack>

              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__oAuCp)}>
                  {p.renderPlasmicSlot({
                    defaultContents: null,
                    value: args.children
                  })}
                </div>
              ) : null}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "svg", "text"],
  link: ["link", "svg", "text"],
  svg: ["svg"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  svg: "svg";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRoot__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRoot__VariantsArgs;
    args?: PlasmicRoot__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRoot__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRoot__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRoot__ArgProps,
      internalVariantPropNames: PlasmicRoot__VariantProps
    });

    return PlasmicRoot__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRoot";
  } else {
    func.displayName = `PlasmicRoot.${nodeName}`;
  }
  return func;
}

export const PlasmicRoot = Object.assign(
  // Top-level PlasmicRoot renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicRoot
    internalVariantProps: PlasmicRoot__VariantProps,
    internalArgProps: PlasmicRoot__ArgProps
  }
);

export default PlasmicRoot;
/* prettier-ignore-end */
