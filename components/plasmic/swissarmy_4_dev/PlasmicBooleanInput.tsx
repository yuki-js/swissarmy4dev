// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3sWsabkqMN5rF9tgqCnVDh
// Component: 1VmMofk7-8f
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Switch from "../../Switch"; // plasmic-import: qY2hlYYzffY/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_swissarmy_4_dev.module.css"; // plasmic-import: 3sWsabkqMN5rF9tgqCnVDh/projectcss
import sty from "./PlasmicBooleanInput.module.css"; // plasmic-import: 1VmMofk7-8f/css

export type PlasmicBooleanInput__VariantMembers = {
  disabled: "disabled";
};

export type PlasmicBooleanInput__VariantsArgs = {
  disabled?: SingleBooleanChoiceArg<"disabled">;
};

type VariantPropType = keyof PlasmicBooleanInput__VariantsArgs;
export const PlasmicBooleanInput__VariantProps = new Array<VariantPropType>(
  "disabled"
);

export type PlasmicBooleanInput__ArgsType = {
  title?: React.ReactNode;
  placeholder?: string;
};

type ArgPropType = keyof PlasmicBooleanInput__ArgsType;
export const PlasmicBooleanInput__ArgProps = new Array<ArgPropType>(
  "title",
  "placeholder"
);

export type PlasmicBooleanInput__OverridesType = {
  root?: p.Flex<"div">;
  _switch?: p.Flex<typeof Switch>;
};

export interface DefaultBooleanInputProps {
  title?: React.ReactNode;
  placeholder?: string;
  disabled?: SingleBooleanChoiceArg<"disabled">;
  className?: string;
}

function PlasmicBooleanInput__RenderFunc(props: {
  variants: PlasmicBooleanInput__VariantsArgs;
  args: PlasmicBooleanInput__ArgsType;
  overrides: PlasmicBooleanInput__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__odWmZ, {
          [sty.freeBoxdisabled__odWmZfaOkT]: hasVariant(
            variants,
            "disabled",
            "disabled"
          )
        })}
      >
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__r7Pf)}>
            {p.renderPlasmicSlot({
              defaultContents: "Enter some text",
              value: args.title,
              className: classNames(sty.slotTargetTitle)
            })}
          </div>
        ) : null}

        <div className={classNames(projectcss.all, sty.freeBox___3KV1Y)}>
          <Switch
            data-plasmic-name={"_switch"}
            data-plasmic-override={overrides._switch}
            className={classNames("__wab_instance", sty._switch, {
              [sty._switchdisabled]: hasVariant(
                variants,
                "disabled",
                "disabled"
              )
            })}
            isDisabled={
              hasVariant(variants, "disabled", "disabled") ? true : undefined
            }
          >
            {null}
          </Switch>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "_switch"],
  _switch: ["_switch"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  _switch: typeof Switch;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBooleanInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBooleanInput__VariantsArgs;
    args?: PlasmicBooleanInput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBooleanInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBooleanInput__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBooleanInput__ArgProps,
      internalVariantPropNames: PlasmicBooleanInput__VariantProps
    });

    return PlasmicBooleanInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBooleanInput";
  } else {
    func.displayName = `PlasmicBooleanInput.${nodeName}`;
  }
  return func;
}

export const PlasmicBooleanInput = Object.assign(
  // Top-level PlasmicBooleanInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    _switch: makeNodeComponent("_switch"),

    // Metadata about props expected for PlasmicBooleanInput
    internalVariantProps: PlasmicBooleanInput__VariantProps,
    internalArgProps: PlasmicBooleanInput__ArgProps
  }
);

export default PlasmicBooleanInput;
/* prettier-ignore-end */
