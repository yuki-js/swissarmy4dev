// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3sWsabkqMN5rF9tgqCnVDh
// Component: l3Xpaw7w2K8
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import EnumInputVariant from "../../EnumInputVariant"; // plasmic-import: wacjR-sYjk/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_swissarmy_4_dev.module.css"; // plasmic-import: 3sWsabkqMN5rF9tgqCnVDh/projectcss
import sty from "./PlasmicEnumInput.module.css"; // plasmic-import: l3Xpaw7w2K8/css

export type PlasmicEnumInput__VariantMembers = {
  disabled: "disabled";
};

export type PlasmicEnumInput__VariantsArgs = {
  disabled?: SingleBooleanChoiceArg<"disabled">;
};

type VariantPropType = keyof PlasmicEnumInput__VariantsArgs;
export const PlasmicEnumInput__VariantProps = new Array<VariantPropType>(
  "disabled"
);

export type PlasmicEnumInput__ArgsType = {
  title?: React.ReactNode;
  placeholder?: string;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicEnumInput__ArgsType;
export const PlasmicEnumInput__ArgProps = new Array<ArgPropType>(
  "title",
  "placeholder",
  "children"
);

export type PlasmicEnumInput__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultEnumInputProps {
  title?: React.ReactNode;
  placeholder?: string;
  children?: React.ReactNode;
  disabled?: SingleBooleanChoiceArg<"disabled">;
  className?: string;
}

function PlasmicEnumInput__RenderFunc(props: {
  variants: PlasmicEnumInput__VariantsArgs;
  args: PlasmicEnumInput__ArgsType;
  overrides: PlasmicEnumInput__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__f5NK4)}>
        <div
          className={classNames(projectcss.all, sty.freeBox__yuQw, {
            [sty.freeBoxdisabled__yuQw7QVpw]: hasVariant(
              variants,
              "disabled",
              "disabled"
            )
          })}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__uOkSi)}>
              {p.renderPlasmicSlot({
                defaultContents: "Enter some text",
                value: args.title
              })}
            </div>
          ) : null}
        </div>

        {true ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__m5Xqi, {
              [sty.freeBoxdisabled__m5Xqi7QVpw]: hasVariant(
                variants,
                "disabled",
                "disabled"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <EnumInputVariant
                    className={classNames(
                      "__wab_instance",
                      sty.enumInputVariant__mINg
                    )}
                  />

                  <EnumInputVariant
                    className={classNames(
                      "__wab_instance",
                      sty.enumInputVariant__gJE5
                    )}
                  />

                  <EnumInputVariant
                    className={classNames(
                      "__wab_instance",
                      sty.enumInputVariant__w8Ndc
                    )}
                  />
                </React.Fragment>
              ),
              value: args.children
            })}
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEnumInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEnumInput__VariantsArgs;
    args?: PlasmicEnumInput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEnumInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEnumInput__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEnumInput__ArgProps,
      internalVariantPropNames: PlasmicEnumInput__VariantProps
    });

    return PlasmicEnumInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEnumInput";
  } else {
    func.displayName = `PlasmicEnumInput.${nodeName}`;
  }
  return func;
}

export const PlasmicEnumInput = Object.assign(
  // Top-level PlasmicEnumInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicEnumInput
    internalVariantProps: PlasmicEnumInput__VariantProps,
    internalArgProps: PlasmicEnumInput__ArgProps
  }
);

export default PlasmicEnumInput;
/* prettier-ignore-end */
